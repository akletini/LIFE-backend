buildscript {
    ext {
        queryDslVersion = '5.0.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
}


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer

group = 'akletini'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
    maven { url = "https://maven.vaadin.com/vaadin-addons" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.hibernate:hibernate-validator:8.0.0.Final'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    implementation 'org.postgresql:postgresql'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"

    // Google tasks
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-tasks:v1-rev20210709-2.0.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation "me.paulschwarz:spring-dotenv:3.0.0"
    implementation 'org.json:json:20220924'

    implementation "com.vaadin:vaadin-spring-boot-starter:24.3.1"
    implementation "org.vaadin.addons.tatu:colorpicker:1.4.1"

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testAnnotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:general")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "com.querydsl:querydsl-sql:${queryDslVersion}"

}

tasks.register('createPostgresDocker', DockerCreateContainer) {
    containerName = "life-test-postgres"
    image = "postgres"
    imageId = "9f3ec01f884db0c4e6b637c730043ad1ac9dcaa684e8fa5b858ddf72a3848ddf"
    envVars = Map.of("POSTGRES_PASSWORD", "postgres")
    hostConfig.portBindings = ['54321:5432']
    hostConfig.autoRemove = true
}
tasks.register('startPostgresDocker', DockerStartContainer) {
    dependsOn createPostgresDocker
    containerId = createPostgresDocker.getContainerId()
}
//tasks.register('waitForPostgresDocker', DockerWaitContainer) {
//    dependsOn startPostgresDocker
//    containerId = createPostgresDocker.getContainerId()
//}
tasks.register('createESDocker', DockerCreateContainer) {
    dependsOn startPostgresDocker
    containerName = "life-test-elastic"
    image = "docker.elastic.co/elasticsearch/elasticsearch:8.11.3"
    imageId = "792fab0c0bd881e19b2cac46d1d7b555d81f02d73d8c0ebab3fd511b5dc5d508"
    envVars = Map.of("discovery.type", "single-node",
            "xpack.security.enabled", "false")
    hostConfig.portBindings = ['9201:9200']
    hostConfig.autoRemove = true
}
tasks.register('startESDocker', DockerStartContainer) {
    dependsOn createESDocker
    containerId = createESDocker.getContainerId()
}
startESDocker.doLast {
    sleep(50 * 1000)
}


tasks.named("startESDocker").get().finalizedBy(tasks.named("test").get())

test {
    dependsOn(tasks.named("startESDocker").get())
    useJUnitPlatform()

    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}

tasks.register('removePostgresDocker', DockerRemoveContainer) {
    dependsOn test
    targetContainerId(createPostgresDocker.getContainerId())
}
tasks.register('removeESDocker', DockerRemoveContainer) {
    dependsOn removePostgresDocker
    targetContainerId(createESDocker.getContainerId())
}


